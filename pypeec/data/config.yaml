# PyPEEC default configuration file.
#
# This configuration does not require:
#   - GPU support (CPU is used)
#   - External FFT library (SciPy FFT is used)
#   - External matrix solver (SciPy SuperLU is used)
#
# Thomas Guillod - Dartmouth College
# Mozilla Public License Version 2.0

# logging options
LOGGING_OPTIONS:
    # logging module logger format with the following custom attributes
    #   - timestamp: current timestamp (formatted as a string)
    #   - duration: elapsed time (formatted as a string)
    #   - process_id: process identification number
    #   - thread_id: thread identification number
    FORMAT:
        LOGGER: '%(duration)s : %(name)-8s : %(levelname)-8s : %(message)s'  # logger format
        TIMESTAMP_FMT: '%m/%d/%Y : %H:%M:%S'  # timestamp format
        DURATION_FMT: '%H:%M:%S.%f' # duration format
        TIMESTAMP_TRC: 0  # timestamp truncation
        DURATION_TRC: 4 # duration truncation

    # logging level for the handlers
    LEVEL: "DEBUG"  # string with a valid Python logging level

    # indentation level for the blocks
    INDENTATION: 4  # integer with the number of spaces per indentation

    # display (or) not exception traces
    EXCEPTION_TRACE: true  # boolean switch

    # options for coloring the log output
    USE_COLOR: false  # use (or not) colors for the logs

    # options color definition
    DEF_COLOR:
        CL_DEBUG: '[38;5;247m' # terminal color code
        CL_INFO: '[38;5;15m' # terminal color code
        CL_WARNING: '[38;5;202m' # terminal color code
        CL_ERROR: '[38;5;196m' # terminal color code
        CL_CRITICAL: '[38;5;196m' # terminal color code
        CL_RESET: '[0m' # terminal color code

# options for the FFT computation
FFT_OPTIONS:
    FFTS_WORKER: null  # number of workers for SciPy (null for number of CPUs)
    FFTW_THREAD: null  # number of threads for FFTW (null for number of CPUs)
    FFTW_CACHE_TIMEOUT: 100.0  # cache timeout in seconds for FFTW (null for no caching)
    FFTW_BYTE_ALIGN: 16  # size for byte alignment FFTW (null for default)

# options for the sparse matrix factorization
FACTORIZATION_OPTIONS:
    THREAD_PARDISO: null  # number of threads for PARDISO (null for number of CPUs)
    THREAD_MKL: null  # number of threads for MKL (null for number of CPUs)

# FFT library
#   - SciPy FFT library is always available (integrated with SciPy)
#   - FFTW has to be installed separately (available through pyFFTW)
#   - CuPy is extremely fast but require GPUs with the corresponding libraries (CUDA platform).
FFT_LIBRARY: "SciPy"  # "SciPy" or "FFTW" or "CuPy"

# sparse matrix factorization options
#   - SuperLU is typically slower but is always available (integrated with SciPy)
#   - UMFPACK is typically faster than SuperLU (available through SciKits)
#   - PARDISO is typically faster than UMFPACK (available through Pydiso)
FACTORIZATION_LIBRARY: "SuperLU"  # "SuperLU" or "UMFPACK" or "PARDISO"

# method for dense matrix multiplication
#   - FFT for doing the multiplication with circulant tensors and FFT
#   - DIRECT for standard matrix multiplication
#   - DIRECT is extremely slow and memory intensive
#   - DIRECT is only useful for debugging and educational purposes
MATRIX_MULTIPLICATION: "FFT"  # "FFT" or "DIRECT"

# method for computing the tensor multiplication with FFT
#   - if true, the computation is done with the 4D tensors
#   - if false, the 4D tensors are sliced into several 3D tensors
#   - splitting the tensors has a slightly increased computational cost
#   - splitting the tensors reduces the memory footprint of the computation
MATRIX_SPLIT: true

# double precision
#   - if false, use single precision numbers
#   - if true, use double precision for numbers
USE_DOUBLE: true

# parallel pool for sweeps
#   - number of parallel processes for computing the solver sweeps
#   - if null, the parallel processing is disabled
SWEEP_POOL: null

# delay (in seconds) between the Qt plots
#   - this parameter should not be required
#   - however, it seems to mitigate a race condition in PyVista/PyVistaQt
PAUSE_GUI: 0.2

# display the PyPEEC logo
#   - if false, the logo is not shown
#   - if true, the logo is shown
DISPLAY_LOGO: true
